pn init #Inicia o projeto
pn i -D typescript #Instala o ts
pn exec tsc --init #Inicia o arquivo de config do ts
pn i -D @types/node #Instala a tipagem do ts pra node
pn exec tsc src/server.ts #Cria um executável do server.ts
node src/server.js #Executa
pn i -D tsx #Instala o tsx (executa ts direto)
pnpx tsx src/server.ts #Inicia o servidor com o tsx
"dev": "tsx watch src/server.ts" #Script para auto restart
pn knex -- migrate:make create-documents #Exemplo de comando knex
pn tsc


-- Anotações --
- Requisitos funcionais:
[x] O usuário deve poder criar uma nova transação;
[x] O usuário deve poder obter um resumo da sua conta;
[x] O usuário deve poder listar todas as transações que já ocorreram;
[x] O usuário deve poder visualizar uma tranzação única;

- Regras de negócio:
[x] A transação pode ser do tipo crédito que somará ao valor total, ou débito que subtrairá;
[x] Deve ser possível identificarmos o usuário entre as requisições;
[x] O usuário só pode visualizar transações o qual ele criou;

- Requisitos não funcionais:
 

Testes:
 - Unitários: unidade da sua aplicação
 - Integração: comunicação entre duas ou mais unidades - ex: sgbd e serviço
 - E2E (end to end, ponta a ponta): simulam um usuário operando na nossa aplicação (chamadas http, websockets)

Pirâmide de testes:
              -
           --e2e--
     -----integração-----
----------unitarios----------